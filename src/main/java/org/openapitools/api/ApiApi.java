/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AddOrganizationUsersRequest;
import org.openapitools.model.AddOrganizationUsersResponse;
import org.openapitools.model.ConnectedAppsAccessToken;
import org.openapitools.model.ConnectedAppsAuthUrl;
import org.openapitools.model.CreateApplicationRequest;
import org.openapitools.model.CreateApplicationResponse;
import org.openapitools.model.CreateFeatureFlagRequest;
import org.openapitools.model.CreateOrganizationRequest;
import org.openapitools.model.CreateOrganizationResponse;
import org.openapitools.model.CreateOrganizationUserRoleRequest;
import org.openapitools.model.CreatePermissionRequest;
import org.openapitools.model.CreateRoleRequest;
import org.openapitools.model.CreateSubscriberSuccessResponse;
import org.openapitools.model.CreateUserRequest;
import org.openapitools.model.CreateUserResponse;
import org.openapitools.model.ErrorResponse;
import org.openapitools.model.GetApplicationResponse;
import org.openapitools.model.GetApplicationsResponse;
import org.openapitools.model.GetEnvironmentFeatureFlagsResponse;
import org.openapitools.model.GetOrganizationFeatureFlagsResponse;
import org.openapitools.model.GetOrganizationUsersResponse;
import org.openapitools.model.GetOrganizationsResponse;
import org.openapitools.model.GetOrganizationsUserRolesResponse;
import org.openapitools.model.GetRolesResponse;
import org.openapitools.model.GetSubscriberResponse;
import org.openapitools.model.GetSubscribersResponse;
import org.openapitools.model.Organization;
import org.openapitools.model.RedirectCallbackUrls;
import org.openapitools.model.ReplaceRedirectCallbackURLsRequest;
import org.openapitools.model.SuccessResponse;
import org.openapitools.model.UpdateApplicationRequest;
import org.openapitools.model.UpdateEnvironementFeatureFlagOverrideRequest;
import org.openapitools.model.UpdateOrganizationRequest;
import org.openapitools.model.UpdateOrganizationUsersRequest;
import org.openapitools.model.UpdateOrganizationUsersResponse;
import org.openapitools.model.UpdateRolePermissionsRequest;
import org.openapitools.model.UpdateRolePermissionsResponse;
import org.openapitools.model.UpdateRolesRequest;
import org.openapitools.model.UpdateUserRequest;
import org.openapitools.model.User;
import org.openapitools.model.UsersResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-08T18:38:44.963952+05:00[Asia/Karachi]")
@Validated
@Tag(name = "Organizations", description = "the Organizations API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/organizations/{org_code}/users : Add Organization Users
     * Add existing users to an organization.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param addOrganizationUsersRequest  (optional)
     * @return Users successfully added. (status code 200)
     *         or No users added. (status code 204)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "addOrganizationUsers",
        summary = "Add Organization Users",
        description = "Add existing users to an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users successfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddOrganizationUsersResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = AddOrganizationUsersResponse.class))
            }),
            @ApiResponse(responseCode = "204", description = "No users added."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/organizations/{org_code}/users",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AddOrganizationUsersResponse> addOrganizationUsers(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "AddOrganizationUsersRequest", description = "") @Valid @RequestBody(required = false) AddOrganizationUsersRequest addOrganizationUsersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"users_added\" : [ \"users_added\", \"users_added\" ], \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"users_added\" : [ \"users_added\", \"users_added\" ], \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/applications/{app_id}/auth_redirect_urls : Add Redirect Callback URLs
     * Add additional redirect callback URLs. 
     *
     * @param appId The identifier for the application. (required)
     * @param replaceRedirectCallbackURLsRequest Callback details. (required)
     * @return Callbacks successfully updated (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "addRedirectCallbackURLs",
        summary = "Add Redirect Callback URLs",
        description = "Add additional redirect callback URLs. ",
        tags = { "Callbacks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Callbacks successfully updated", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/applications/{app_id}/auth_redirect_urls",
        produces = { "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> addRedirectCallbackURLs(
        @Parameter(name = "app_id", description = "The identifier for the application.", required = true, in = ParameterIn.PATH) @PathVariable("app_id") String appId,
        @Parameter(name = "ReplaceRedirectCallbackURLsRequest", description = "Callback details.", required = true) @Valid @RequestBody ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/applications : Create Application
     * Create an application.
     *
     * @param createApplicationRequest Application details. (optional)
     * @return Application successfully created. (status code 200)
     *         or Error creating user. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createApplication",
        summary = "Create Application",
        description = "Create an application.",
        tags = { "Applications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Application successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateApplicationResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = CreateApplicationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error creating user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/applications",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateApplicationResponse> createApplication(
        @Parameter(name = "CreateApplicationRequest", description = "Application details.") @Valid @RequestBody(required = false) CreateApplicationRequest createApplicationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"application\" : { \"id\" : \"id\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"application\" : { \"id\" : \"id\", \"client_secret\" : \"client_secret\", \"client_id\" : \"client_id\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/feature_flags : Create Feature Flag
     * Create feature flag.
     *
     * @param createFeatureFlagRequest Flag details. (required)
     * @return Feature flag successfully created (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createFeatureFlag",
        summary = "Create Feature Flag",
        description = "Create feature flag.",
        tags = { "Feature Flags" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Feature flag successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/feature_flags",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> createFeatureFlag(
        @Parameter(name = "CreateFeatureFlagRequest", description = "Flag details.", required = true) @Valid @RequestBody CreateFeatureFlagRequest createFeatureFlagRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/organization : Create Organization
     * Create an organization.
     *
     * @param createOrganizationRequest Organization details. (optional)
     * @return Organization successfully created. (status code 200)
     *         or Invalid credentials. (status code 403)
     *         or Error creating user. (status code 400)
     *         or Could not create organization. (status code 500)
     */
    @Operation(
        operationId = "createOrganization",
        summary = "Create Organization",
        description = "Create an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Organization successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateOrganizationResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = CreateOrganizationResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials."),
            @ApiResponse(responseCode = "400", description = "Error creating user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Could not create organization.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/organization",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateOrganizationResponse> createOrganization(
        @Parameter(name = "CreateOrganizationRequest", description = "Organization details.") @Valid @RequestBody(required = false) CreateOrganizationRequest createOrganizationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"organization\" : { \"code\" : \"code\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"organization\" : { \"code\" : \"code\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/organizations/{org_code}/users/{user_id}/roles : Add Organization User Role
     * Add role to an organization user.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param userId The user&#39;s id. (required)
     * @param createOrganizationUserRoleRequest Role details. (required)
     * @return User successfully removed from (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createOrganizationUserRole",
        summary = "Add Organization User Role",
        description = "Add role to an organization user.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully removed from", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/organizations/{org_code}/users/{user_id}/roles",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> createOrganizationUserRole(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "user_id", description = "The user's id.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "CreateOrganizationUserRoleRequest", description = "Role details.", required = true) @Valid @RequestBody CreateOrganizationUserRoleRequest createOrganizationUserRoleRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/permissions : Create Permission
     * Create a new permission.
     *
     * @param createPermissionRequest Permission details. (optional)
     * @return Permission successfully created (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createPermission",
        summary = "Create Permission",
        description = "Create a new permission.",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Permission successfully created", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/permissions",
        produces = { "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> createPermission(
        @Parameter(name = "CreatePermissionRequest", description = "Permission details.") @Valid @RequestBody(required = false) CreatePermissionRequest createPermissionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/role : Create Role
     * Create role.
     *
     * @param createRoleRequest Role details. (optional)
     * @return Role successfully created (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createRole",
        summary = "Create Role",
        description = "Create role.",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Role successfully created", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/role",
        produces = { "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> createRole(
        @Parameter(name = "CreateRoleRequest", description = "Role details.") @Valid @RequestBody(required = false) CreateRoleRequest createRoleRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/subscribers : Create Subscriber
     * Create subscriber.
     *
     * @param firstName Subscriber&#39;s first name. (required)
     * @param lastName Subscriber&#39;s last name. (required)
     * @param email The email address of the subscriber. (required)
     * @return Subscriber successfully created (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createSubscriber",
        summary = "Create Subscriber",
        description = "Create subscriber.",
        tags = { "Subscribers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Subscriber successfully created", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = CreateSubscriberSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/subscribers",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<CreateSubscriberSuccessResponse> createSubscriber(
        @NotNull @Parameter(name = "first_name", description = "Subscriber's first name.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "first_name", required = true) String firstName,
        @NotNull @Parameter(name = "last_name", description = "Subscriber's last name.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "last_name", required = true) String lastName,
        @NotNull @Parameter(name = "email", description = "The email address of the subscriber.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"subscriber\" : { \"subscriber_id\" : \"subscriber_id\" } }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/user : Create User
     * Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user. 
     *
     * @param createUserRequest The details of the user to create. (optional)
     * @return User successfully created. (status code 200)
     *         or Error creating user. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create User",
        description = "Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user. ",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUserResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = CreateUserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error creating user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateUserResponse> createUser(
        @Parameter(name = "CreateUserRequest", description = "The details of the user to create.") @Valid @RequestBody(required = false) CreateUserRequest createUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"identities\" : [ { \"result\" : { \"created\" : true }, \"type\" : \"type\" }, { \"result\" : { \"created\" : true }, \"type\" : \"type\" } ], \"created\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"identities\" : [ { \"result\" : { \"created\" : true }, \"type\" : \"type\" }, { \"result\" : { \"created\" : true }, \"type\" : \"type\" } ], \"created\" : true, \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/applications/{app_id}/auth_redirect_urls : Delete Callback URLs
     * Delete callback URLs. 
     *
     * @param appId The identifier for the application. (required)
     * @param urls Urls to delete, comma separated and url encoded. (required)
     * @return Callback URLs successfully deleted. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteCallbackURLs",
        summary = "Delete Callback URLs",
        description = "Delete callback URLs. ",
        tags = { "Callbacks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Callback URLs successfully deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/applications/{app_id}/auth_redirect_urls",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteCallbackURLs(
        @Parameter(name = "app_id", description = "The identifier for the application.", required = true, in = ParameterIn.PATH) @PathVariable("app_id") String appId,
        @NotNull @Parameter(name = "urls", description = "Urls to delete, comma separated and url encoded.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "urls", required = true) String urls
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/environment/feature_flags/{feature_flag_key} : Delete Environment Feature Flag Override
     * Delete environment feature flag override.
     *
     * @param featureFlagKey The identifier for the feature flag. (required)
     * @return Feature flag deleted successfully. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteEnvironementFeatureFlagOverride",
        summary = "Delete Environment Feature Flag Override",
        description = "Delete environment feature flag override.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag deleted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/environment/feature_flags/{feature_flag_key}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteEnvironementFeatureFlagOverride(
        @Parameter(name = "feature_flag_key", description = "The identifier for the feature flag.", required = true, in = ParameterIn.PATH) @PathVariable("feature_flag_key") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/environment/feature_flags : Delete Environment Feature Flag Overrides
     * Delete all environment feature flag overrides.
     *
     * @return Feature flag overrides deleted successfully. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteEnvironementFeatureFlagOverrides",
        summary = "Delete Environment Feature Flag Overrides",
        description = "Delete all environment feature flag overrides.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag overrides deleted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/environment/feature_flags",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteEnvironementFeatureFlagOverrides(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/feature_flags/{feature_flag_key} : Delete Feature Flag
     * Delete feature flag
     *
     * @param featureFlagKey The identifier for the feature flag. (required)
     * @return Feature flag successfully updated. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteFeatureFlag",
        summary = "Delete Feature Flag",
        description = "Delete feature flag",
        tags = { "Feature Flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/feature_flags/{feature_flag_key}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteFeatureFlag(
        @Parameter(name = "feature_flag_key", description = "The identifier for the feature flag.", required = true, in = ParameterIn.PATH) @PathVariable("feature_flag_key") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/organization/{org_code} : Delete Organization
     * Delete an organization.
     *
     * @param orgCode The identifier for the organization. (required)
     * @return Organization successfully deleted. (status code 200)
     *         or Invalid credentials. (status code 403)
     *         or Error deleting organization. (status code 400)
     */
    @Operation(
        operationId = "deleteOrganization",
        summary = "Delete Organization",
        description = "Delete an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Organization successfully deleted."),
            @ApiResponse(responseCode = "403", description = "Invalid credentials."),
            @ApiResponse(responseCode = "400", description = "Error deleting organization.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/organization/{org_code}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<Void> deleteOrganization(
        @Parameter(name = "org_code", description = "The identifier for the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/organizations/{org_code}/feature_flags/{feature_flag_key} : Delete Organization Feature Flag Override
     * Delete organization feature flag override.
     *
     * @param orgCode The identifier for the organization. (required)
     * @param featureFlagKey The identifier for the feature flag. (required)
     * @return Feature flag override successfully deleted. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteOrganizationFeatureFlagOverride",
        summary = "Delete Organization Feature Flag Override",
        description = "Delete organization feature flag override.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag override successfully deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteOrganizationFeatureFlagOverride(
        @Parameter(name = "org_code", description = "The identifier for the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "feature_flag_key", description = "The identifier for the feature flag.", required = true, in = ParameterIn.PATH) @PathVariable("feature_flag_key") String featureFlagKey
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/organizations/{org_code}/feature_flags : Delete Organization Feature Flag Overrides
     * Delete all organization feature flag overrides.
     *
     * @param orgCode The identifier for the organization. (required)
     * @return Feature flag overrides successfully deleted. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteOrganizationFeatureFlagOverrides",
        summary = "Delete Organization Feature Flag Overrides",
        description = "Delete all organization feature flag overrides.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag overrides successfully deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/organizations/{org_code}/feature_flags",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteOrganizationFeatureFlagOverrides(
        @Parameter(name = "org_code", description = "The identifier for the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id} : Delete Organization User Role
     * Delete role for an organization user.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param userId The user&#39;s id. (required)
     * @param roleId The role id. (required)
     * @return User successfully removed. (status code 200)
     *         or Error creating user. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteOrganizationUserRole",
        summary = "Delete Organization User Role",
        description = "Delete role for an organization user.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully removed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error creating user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteOrganizationUserRole(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "user_id", description = "The user's id.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "role_id", description = "The role id.", required = true, in = ParameterIn.PATH) @PathVariable("role_id") String roleId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/user : Delete User
     * Delete a user record. 
     *
     * @param id The user&#39;s id. (required)
     * @param isDeleteProfile Delete all data and remove the user&#39;s profile from all of Kinde, including the subscriber list (optional)
     * @return User successfully deleted. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete User",
        description = "Delete a user record. ",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/user",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> deleteUser(
        @NotNull @Parameter(name = "id", description = "The user's id.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) String id,
        @Parameter(name = "is_delete_profile", description = "Delete all data and remove the user's profile from all of Kinde, including the subscriber list", in = ParameterIn.QUERY) @Valid @RequestParam(value = "is_delete_profile", required = false) String isDeleteProfile
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/applications/{application_id} : Get Application
     * Gets an application given the application&#39;s id. 
     *
     * @param applicationId The identifier for the application. (required)
     * @return Application successfully retrieved. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getApplication",
        summary = "Get Application",
        description = "Gets an application given the application's id. ",
        tags = { "Applications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Application successfully retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApplicationResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetApplicationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/applications/{application_id}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetApplicationResponse> getApplication(
        @Parameter(name = "application_id", description = "The identifier for the application.", required = true, in = ParameterIn.PATH) @PathVariable("application_id") String applicationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"application\" : { \"name\" : \"name\", \"id\" : \"id\", \"client_secret\" : \"client_secret\", \"type\" : \"type\", \"client_id\" : \"client_id\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"application\" : { \"name\" : \"name\", \"id\" : \"id\", \"client_secret\" : \"client_secret\", \"type\" : \"type\", \"client_id\" : \"client_id\" }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/applications : List Applications
     * Get a list of applications. 
     *
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @return A successful response with a list of applications or an empty list. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getApplications",
        summary = "List Applications",
        description = "Get a list of applications. ",
        tags = { "Applications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response with a list of applications or an empty list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetApplicationsResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetApplicationsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/applications",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetApplicationsResponse> getApplications(
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"next_token\" : \"next_token\", \"applications\" : [ { \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\" }, { \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"next_token\" : \"next_token\", \"applications\" : [ { \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\" }, { \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/business : List business details
     * Get your business details.
     *
     * @param code Business code. (required)
     * @param name Business name. (required)
     * @param email Email associated with business. (required)
     * @param phone Phone number associated with business. (optional)
     * @param industry The industry your business is in. (optional)
     * @param timezone The timezone your business is in. (optional)
     * @param privacyUrl Your Privacy policy URL. (optional)
     * @param termsUrl Your Terms and Conditions URL. (optional)
     * @return A successful response with your business details. (status code 201)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getBusiness",
        summary = "List business details",
        description = "Get your business details.",
        tags = { "Business" },
        responses = {
            @ApiResponse(responseCode = "201", description = "A successful response with your business details.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/business",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> getBusiness(
        @NotNull @Parameter(name = "code", description = "Business code.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "code", required = true) String code,
        @NotNull @Parameter(name = "name", description = "Business name.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name,
        @NotNull @Parameter(name = "email", description = "Email associated with business.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email,
        @Parameter(name = "phone", description = "Phone number associated with business.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "phone", required = false) String phone,
        @Parameter(name = "industry", description = "The industry your business is in.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "industry", required = false) String industry,
        @Parameter(name = "timezone", description = "The timezone your business is in.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timezone", required = false) String timezone,
        @Parameter(name = "privacy_url", description = "Your Privacy policy URL.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "privacy_url", required = false) String privacyUrl,
        @Parameter(name = "terms_url", description = "Your Terms and Conditions URL.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "terms_url", required = false) String termsUrl
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/applications/{app_id}/auth_redirect_urls : List Callback URLs
     * Returns an application&#39;s redirect callback URLs. 
     *
     * @param appId The identifier for the application. (required)
     * @return Callback URLs successfully retrieved. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getCallbackURLs",
        summary = "List Callback URLs",
        description = "Returns an application's redirect callback URLs. ",
        tags = { "Callbacks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Callback URLs successfully retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RedirectCallbackUrls.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = RedirectCallbackUrls.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/applications/{app_id}/auth_redirect_urls",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<RedirectCallbackUrls> getCallbackURLs(
        @Parameter(name = "app_id", description = "The identifier for the application.", required = true, in = ParameterIn.PATH) @PathVariable("app_id") String appId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"redirect_urls\" : [ \"redirect_urls\", \"redirect_urls\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"redirect_urls\" : [ \"redirect_urls\", \"redirect_urls\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/connected_apps/auth_url : Get Connected App URL
     * Get a URL that authenticates and authorizes a user to a third-party connected app.
     *
     * @param keyCodeRef The unique key code reference of the connected app to authenticate against. (required)
     * @param userId The id of the user that needs to authenticate to the third-party connected app. (required)
     * @return A URL that can be used to authenticate and a session id to identify this authentication session. (status code 200)
     *         or Error retrieving connected app auth url. (status code 400)
     *         or Error retrieving connected app auth url. (status code 404)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getConnectedAppAuthUrl",
        summary = "Get Connected App URL",
        description = "Get a URL that authenticates and authorizes a user to a third-party connected app.",
        tags = { "Connected Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A URL that can be used to authenticate and a session id to identify this authentication session.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConnectedAppsAuthUrl.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ConnectedAppsAuthUrl.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error retrieving connected app auth url.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Error retrieving connected app auth url.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/connected_apps/auth_url",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<ConnectedAppsAuthUrl> getConnectedAppAuthUrl(
        @NotNull @Parameter(name = "key_code_ref", description = "The unique key code reference of the connected app to authenticate against.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key_code_ref", required = true) String keyCodeRef,
        @NotNull @Parameter(name = "user_id", description = "The id of the user that needs to authenticate to the third-party connected app.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "user_id", required = true) String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"session_id\" : \"session_id\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"session_id\" : \"session_id\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/connected_apps/token : Get Connected App Token
     * Get an access token that can be used to call the third-party provider linked to the connected app.
     *
     * @param sessionId The unique sesssion id reprensenting the login session of a user. (required)
     * @return An access token that can be used to query a third-party provider, as well as the token&#39;s expiry time. (status code 200)
     *         or The session id provided points to an invalid session. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getConnectedAppToken",
        summary = "Get Connected App Token",
        description = "Get an access token that can be used to call the third-party provider linked to the connected app.",
        tags = { "Connected Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An access token that can be used to query a third-party provider, as well as the token's expiry time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConnectedAppsAccessToken.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ConnectedAppsAccessToken.class))
            }),
            @ApiResponse(responseCode = "400", description = "The session id provided points to an invalid session.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/connected_apps/token",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<ConnectedAppsAccessToken> getConnectedAppToken(
        @NotNull @Parameter(name = "session_id", description = "The unique sesssion id reprensenting the login session of a user.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "session_id", required = true) String sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\", \"access_token_expiry\" : \"access_token_expiry\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\", \"access_token_expiry\" : \"access_token_expiry\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/environment/feature_flags : List Environment Feature Flags
     * Get environment feature flags.
     *
     * @return Feature flags retrieved successfully. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getEnvironementFeatureFlags",
        summary = "List Environment Feature Flags",
        description = "Get environment feature flags.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flags retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetEnvironmentFeatureFlagsResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetEnvironmentFeatureFlagsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/environment/feature_flags",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetEnvironmentFeatureFlagsResponse> getEnvironementFeatureFlags(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"feature_flags\" : { \"key\" : { \"type\" : \"str\", \"value\" : \"value\" } }, \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"feature_flags\" : { \"key\" : { \"type\" : \"str\", \"value\" : \"value\" } }, \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/industries : List industries and industry keys.
     * Get a list of industries and associated industry keys.
     *
     * @param industryKey Industry Key. (optional)
     * @param name Industry name. (optional)
     * @return A successful response with a list of industries and industry keys. (status code 201)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getIndustries",
        summary = "List industries and industry keys.",
        description = "Get a list of industries and associated industry keys.",
        tags = { "Industries" },
        responses = {
            @ApiResponse(responseCode = "201", description = "A successful response with a list of industries and industry keys.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/industries",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> getIndustries(
        @Parameter(name = "industry_key", description = "Industry Key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "industry_key", required = false) String industryKey,
        @Parameter(name = "name", description = "Industry name.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/organization : Get Organization
     * Gets an organization given the organization&#39;s code. 
     *
     * @param code The organization&#39;s code. (optional)
     * @return Organization successfully retrieved. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getOrganization",
        summary = "Get Organization",
        description = "Gets an organization given the organization's code. ",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Organization successfully retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = Organization.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organization",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<Organization> getOrganization(
        @Parameter(name = "code", description = "The organization's code.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "code", required = false) String code
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"name\" : \"name\", \"is_default\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"name\" : \"name\", \"is_default\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/organizations/{org_code}/feature_flags : List Organization Feature Flags
     * Get all organization feature flags.
     *
     * @param orgCode The identifier for the organization. (required)
     * @return Feature flag overrides successfully returned. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getOrganizationFeatureFlags",
        summary = "List Organization Feature Flags",
        description = "Get all organization feature flags.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag overrides successfully returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrganizationFeatureFlagsResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetOrganizationFeatureFlagsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organizations/{org_code}/feature_flags",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetOrganizationFeatureFlagsResponse> getOrganizationFeatureFlags(
        @Parameter(name = "org_code", description = "The identifier for the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"feature_flags\" : { \"key\" : { \"type\" : \"str\", \"value\" : \"value\" } }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"feature_flags\" : { \"key\" : { \"type\" : \"str\", \"value\" : \"value\" } }, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/organizations/{org_code}/users/{user_id}/roles : List Organization User Roles
     * Get roles for an organization user.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param userId The user&#39;s id. (required)
     * @return A successful response with a list of user roles. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getOrganizationUserRoles",
        summary = "List Organization User Roles",
        description = "Get roles for an organization user.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response with a list of user roles.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrganizationsUserRolesResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetOrganizationsUserRolesResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organizations/{org_code}/users/{user_id}/roles",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetOrganizationsUserRolesResponse> getOrganizationUserRoles(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "user_id", description = "The user's id.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"roles\" : [ { \"name\" : \"name\", \"id\" : \"id\", \"key\" : \"key\" }, { \"name\" : \"name\", \"id\" : \"id\", \"key\" : \"key\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"roles\" : [ { \"name\" : \"name\", \"id\" : \"id\", \"key\" : \"key\" }, { \"name\" : \"name\", \"id\" : \"id\", \"key\" : \"key\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/organizations/{org_code}/users : List Organization Users
     * Get users in an organization.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @param permissions Filter by user permissions (optional)
     * @return A successful response with a list of organization users or an empty list. (status code 200)
     *         or Error creating user (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getOrganizationUsers",
        summary = "List Organization Users",
        description = "Get users in an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response with a list of organization users or an empty list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrganizationUsersResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetOrganizationUsersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error creating user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organizations/{org_code}/users",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetOrganizationUsersResponse> getOrganizationUsers(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken,
        @Parameter(name = "permissions", description = "Filter by user permissions", in = ParameterIn.QUERY) @Valid @RequestParam(value = "permissions", required = false) String permissions
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"organization_users\" : [ { \"full_name\" : \"full_name\", \"roles\" : [ \"roles\", \"roles\" ], \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }, { \"full_name\" : \"full_name\", \"roles\" : [ \"roles\", \"roles\" ], \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"email\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"organization_users\" : [ { \"full_name\" : \"full_name\", \"roles\" : [ \"roles\", \"roles\" ], \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }, { \"full_name\" : \"full_name\", \"roles\" : [ \"roles\", \"roles\" ], \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"email\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/organizations : List Organizations
     * Get a list of organizations. 
     *
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @return A successful response with a list of organizations or an empty list. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getOrganizations",
        summary = "List Organizations",
        description = "Get a list of organizations. ",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A successful response with a list of organizations or an empty list.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrganizationsResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetOrganizationsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organizations",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetOrganizationsResponse> getOrganizations(
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"roles\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"key\" : \"key\" }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"key\" : \"key\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"roles\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"key\" : \"key\" }, { \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"key\" : \"key\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/permissions : List Permissions
     * The returned list can be sorted by permission name or permission ID in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
     *
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @return Permissions successfully retrieved. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getPermissions",
        summary = "List Permissions",
        description = "The returned list can be sorted by permission name or permission ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. ",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Permissions successfully retrieved.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> getPermissions(
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/roles : List Roles
     * The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
     *
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @return Roles successfully retrieved. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getRoles",
        summary = "List Roles",
        description = "The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. ",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Roles successfully retrieved.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetRolesResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/roles",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetRolesResponse> getRoles(
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"roles\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"key\" : \"key\" }, { \"name\" : \"name\", \"description\" : \"description\", \"key\" : \"key\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/subscribers/{subscriber_id} : Get Subscriber
     * Retrieve a subscriber record. 
     *
     * @param subscriberId The subscriber&#39;s id. (required)
     * @return Subscriber successfully retrieved. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getSubscriber",
        summary = "Get Subscriber",
        description = "Retrieve a subscriber record. ",
        tags = { "Subscribers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Subscriber successfully retrieved.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetSubscriberResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/subscribers/{subscriber_id}",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetSubscriberResponse> getSubscriber(
        @Parameter(name = "subscriber_id", description = "The subscriber's id.", required = true, in = ParameterIn.PATH) @PathVariable("subscriber_id") String subscriberId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"subscribers\" : [ { \"preferred_email\" : \"preferred_email\", \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\" }, { \"preferred_email\" : \"preferred_email\", \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/subscribers : List Subscribers
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
     *
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @return Subscriber successfully retrieved. (status code 200)
     *         or Bad request. (status code 403)
     */
    @Operation(
        operationId = "getSubscribers",
        summary = "List Subscribers",
        description = "The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. ",
        tags = { "Subscribers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Subscriber successfully retrieved.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = GetSubscribersResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Bad request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/subscribers",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<GetSubscribersResponse> getSubscribers(
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"subscribers\" : [ { \"full_name\" : \"full_name\", \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }, { \"full_name\" : \"full_name\", \"last_name\" : \"last_name\", \"id\" : \"id\", \"first_name\" : \"first_name\", \"email\" : \"email\" } ], \"message\" : \"message\", \"next_token\" : \"next_token\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/timezones : List timezones and timezone IDs.
     * Get a list of timezones and associated timezone keys.
     *
     * @param timezoneKey Timezone Key. (optional)
     * @param name Timezone. (optional)
     * @return A successful response with a list of timezones and timezone keys. (status code 201)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getTimezones",
        summary = "List timezones and timezone IDs.",
        description = "Get a list of timezones and associated timezone keys.",
        tags = { "Timezones" },
        responses = {
            @ApiResponse(responseCode = "201", description = "A successful response with a list of timezones and timezone keys.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/timezones",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> getTimezones(
        @Parameter(name = "timezone_key", description = "Timezone Key.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timezone_key", required = false) String timezoneKey,
        @Parameter(name = "name", description = "Timezone.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/user : Get User
     * Retrieve a user record. 
     *
     * @param id The user&#39;s id. (required)
     * @return User successfully updated. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getUserData",
        summary = "Get User",
        description = "Retrieve a user record. ",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/user",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<User> getUserData(
        @NotNull @Parameter(name = "id", description = "The user's id.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/users : List Users
     * The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter. 
     *
     * @param sort Field and order to sort the result by. (optional)
     * @param pageSize Number of results per page. Defaults to 10 if parameter not sent. (optional)
     * @param userId ID of the user to filter by. (optional)
     * @param nextToken A string to get the next page of results if there are more results. (optional)
     * @param email Filter the results by email address. The query string should be comma separated and url encoded. (optional)
     * @return Users successfully retrieved. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "getUsers",
        summary = "List Users",
        description = "The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. ",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users successfully retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = UsersResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/users",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<UsersResponse> getUsers(
        @Parameter(name = "sort", description = "Field and order to sort the result by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "page_size", description = "Number of results per page. Defaults to 10 if parameter not sent.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "user_id", description = "ID of the user to filter by.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "user_id", required = false) String userId,
        @Parameter(name = "next_token", description = "A string to get the next page of results if there are more results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "next_token", required = false) String nextToken,
        @Parameter(name = "email", description = "Filter the results by email address. The query string should be comma separated and url encoded.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = false) String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"next_token\" : \"next_token\", \"users\" : [ { \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }, { \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\", \"next_token\" : \"next_token\", \"users\" : [ { \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }, { \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/organizations/{org_code}/users/{user_id} : Remove Organization User
     * Remove user from an organization.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param userId The user&#39;s id. (required)
     * @return User successfully removed from organization (status code 200)
     *         or Error removing user (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "removeOrganizationUser",
        summary = "Remove Organization User",
        description = "Remove user from an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully removed from organization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error removing user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/organizations/{org_code}/users/{user_id}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> removeOrganizationUser(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "user_id", description = "The user's id.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/applications/{app_id}/auth_redirect_urls : Replace Redirect Callback URLs
     * Replace all redirect callback URLs. 
     *
     * @param appId The identifier for the application. (required)
     * @param replaceRedirectCallbackURLsRequest Callback details. (required)
     * @return Callbacks successfully updated (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "replaceRedirectCallbackURLs",
        summary = "Replace Redirect Callback URLs",
        description = "Replace all redirect callback URLs. ",
        tags = { "Callbacks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Callbacks successfully updated", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/applications/{app_id}/auth_redirect_urls",
        produces = { "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> replaceRedirectCallbackURLs(
        @Parameter(name = "app_id", description = "The identifier for the application.", required = true, in = ParameterIn.PATH) @PathVariable("app_id") String appId,
        @Parameter(name = "ReplaceRedirectCallbackURLsRequest", description = "Callback details.", required = true) @Valid @RequestBody ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/connected_apps/revoke : Revoke Connected App Token
     * Revoke the tokens linked to the connected app session.
     *
     * @param sessionId The unique sesssion id reprensenting the login session of a user. (required)
     * @return An access token that can be used to query a third-party provider, as well as the token&#39;s expiry time. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     *         or Invalid HTTP method used. (status code 405)
     */
    @Operation(
        operationId = "revokeConnectedAppToken",
        summary = "Revoke Connected App Token",
        description = "Revoke the tokens linked to the connected app session.",
        tags = { "Connected Apps" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An access token that can be used to query a third-party provider, as well as the token's expiry time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid HTTP method used.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/connected_apps/revoke",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> revokeConnectedAppToken(
        @NotNull @Parameter(name = "session_id", description = "The unique sesssion id reprensenting the login session of a user.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "session_id", required = true) String sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/applications/{application_id} : Update Application
     * Update an application.
     *
     * @param applicationId The identifier for the application. (required)
     * @param updateApplicationRequest Application details. (optional)
     * @return Application successfully updated. (status code 200)
     *         or Invalid credentials. (status code 403)
     *         or Bad request. (status code 400)
     */
    @Operation(
        operationId = "updateApplication",
        summary = "Update Application",
        description = "Update an application.",
        tags = { "Applications" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Application successfully updated."),
            @ApiResponse(responseCode = "403", description = "Invalid credentials."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/applications/{application_id}",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateApplication(
        @Parameter(name = "application_id", description = "The identifier for the application.", required = true, in = ParameterIn.PATH) @PathVariable("application_id") String applicationId,
        @Parameter(name = "UpdateApplicationRequest", description = "Application details.") @Valid @RequestBody(required = false) UpdateApplicationRequest updateApplicationRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/business : Update business details
     * Update business details.
     *
     * @param businessName Business name. (required)
     * @param primaryEmail Email associated with business. (required)
     * @param primaryPhone Phone number associated with business. (optional)
     * @param industryKey The key of the industry your business is in. (optional)
     * @param timezoneId The ID of the timezone your business is in. (optional)
     * @param privacyUrl Your Privacy policy URL. (optional)
     * @param termsUrl Your Terms and Conditions URL. (optional)
     * @param isShowKindeBranding Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)
     * @param isClickWrap Show a policy acceptance checkbox on sign up. (optional)
     * @param partnerCode Your Kinde Perk code. (optional)
     * @return Business successfully updated. (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateBusiness",
        summary = "Update business details",
        description = "Update business details.",
        tags = { "Business" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Business successfully updated.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/business",
        produces = { "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> updateBusiness(
        @NotNull @Parameter(name = "business_name", description = "Business name.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "business_name", required = true) String businessName,
        @NotNull @Parameter(name = "primary_email", description = "Email associated with business.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "primary_email", required = true) String primaryEmail,
        @Parameter(name = "primary_phone", description = "Phone number associated with business.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "primary_phone", required = false) String primaryPhone,
        @Parameter(name = "industry_key", description = "The key of the industry your business is in.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "industry_key", required = false) String industryKey,
        @Parameter(name = "timezone_id", description = "The ID of the timezone your business is in.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timezone_id", required = false) String timezoneId,
        @Parameter(name = "privacy_url", description = "Your Privacy policy URL.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "privacy_url", required = false) String privacyUrl,
        @Parameter(name = "terms_url", description = "Your Terms and Conditions URL.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "terms_url", required = false) String termsUrl,
        @Parameter(name = "is_show_kinde_branding", description = "Display \"Powered by Kinde\" on your sign up, sign in, and subscription pages.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "is_show_kinde_branding", required = false) String isShowKindeBranding,
        @Parameter(name = "is_click_wrap", description = "Show a policy acceptance checkbox on sign up.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "is_click_wrap", required = false) Boolean isClickWrap,
        @Parameter(name = "partner_code", description = "Your Kinde Perk code.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "partner_code", required = false) String partnerCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/environment/feature_flags/{feature_flag_key} : Update Environment Feature Flag Override
     * Update environment feature flag override.
     *
     * @param featureFlagKey The identifier for the feature flag. (required)
     * @param updateEnvironementFeatureFlagOverrideRequest Flag details. (required)
     * @return Feature flag override successful (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateEnvironementFeatureFlagOverride",
        summary = "Update Environment Feature Flag Override",
        description = "Update environment feature flag override.",
        tags = { "Environments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag override successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/environment/feature_flags/{feature_flag_key}",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> updateEnvironementFeatureFlagOverride(
        @Parameter(name = "feature_flag_key", description = "The identifier for the feature flag.", required = true, in = ParameterIn.PATH) @PathVariable("feature_flag_key") String featureFlagKey,
        @Parameter(name = "UpdateEnvironementFeatureFlagOverrideRequest", description = "Flag details.", required = true) @Valid @RequestBody UpdateEnvironementFeatureFlagOverrideRequest updateEnvironementFeatureFlagOverrideRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/feature_flags/{feature_flag_key} : Replace Feature Flag
     * Update feature flag.
     *
     * @param featureFlagKey The key identifier for the feature flag. (required)
     * @param name The name of the flag. (required)
     * @param description Description of the flag purpose. (required)
     * @param type The variable type (required)
     * @param allowOverrideLevel Allow the flag to be overridden at a different level. (required)
     * @param defaultValue Default value for the flag used by environments and organizations. (required)
     * @return Feature flag successfully updated. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateFeatureFlag",
        summary = "Replace Feature Flag",
        description = "Update feature flag.",
        tags = { "Feature Flags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/feature_flags/{feature_flag_key}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> updateFeatureFlag(
        @Parameter(name = "feature_flag_key", description = "The key identifier for the feature flag.", required = true, in = ParameterIn.PATH) @PathVariable("feature_flag_key") String featureFlagKey,
        @NotNull @Parameter(name = "name", description = "The name of the flag.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name,
        @NotNull @Parameter(name = "description", description = "Description of the flag purpose.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = true) String description,
        @NotNull @Parameter(name = "type", description = "The variable type", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = true) String type,
        @NotNull @Parameter(name = "allow_override_level", description = "Allow the flag to be overridden at a different level.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "allow_override_level", required = true) String allowOverrideLevel,
        @NotNull @Parameter(name = "default_value", description = "Default value for the flag used by environments and organizations.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "default_value", required = true) String defaultValue
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/organization/{org_code} : Update Organization
     * Update an organization.
     *
     * @param orgCode The identifier for the organization. (required)
     * @param updateOrganizationRequest Organization details. (optional)
     * @return Organization successfully updated. (status code 200)
     *         or Invalid credentials. (status code 403)
     *         or Error updating organization. (status code 400)
     */
    @Operation(
        operationId = "updateOrganization",
        summary = "Update Organization",
        description = "Update an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Organization successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials."),
            @ApiResponse(responseCode = "400", description = "Error updating organization.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/organization/{org_code}",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> updateOrganization(
        @Parameter(name = "org_code", description = "The identifier for the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "UpdateOrganizationRequest", description = "Organization details.") @Valid @RequestBody(required = false) UpdateOrganizationRequest updateOrganizationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/organizations/{org_code}/feature_flags/{feature_flag_key} : Update Organization Feature Flag Override
     * Update organization feature flag override.
     *
     * @param orgCode The identifier for the organization (required)
     * @param featureFlagKey The identifier for the feature flag (required)
     * @param value Override value (required)
     * @return Feature flag override successfully updated. (status code 200)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateOrganizationFeatureFlagOverride",
        summary = "Update Organization Feature Flag Override",
        description = "Update organization feature flag override.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Feature flag override successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SuccessResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}",
        produces = { "application/json", "application/json; charset=utf-8" }
    )
    default ResponseEntity<SuccessResponse> updateOrganizationFeatureFlagOverride(
        @Parameter(name = "org_code", description = "The identifier for the organization", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "feature_flag_key", description = "The identifier for the feature flag", required = true, in = ParameterIn.PATH) @PathVariable("feature_flag_key") String featureFlagKey,
        @NotNull @Parameter(name = "value", description = "Override value", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "value", required = true) String value
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/organizations/{org_code}/users : Update Organization Users
     * Update users that belong to an organization.
     *
     * @param orgCode The organization&#39;s code. (required)
     * @param updateOrganizationUsersRequest  (optional)
     * @return Users successfully removed. (status code 200)
     *         or Error updating organization user. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateOrganizationUsers",
        summary = "Update Organization Users",
        description = "Update users that belong to an organization.",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users successfully removed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateOrganizationUsersResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = UpdateOrganizationUsersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error updating organization user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/organizations/{org_code}/users",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateOrganizationUsersResponse> updateOrganizationUsers(
        @Parameter(name = "org_code", description = "The organization's code.", required = true, in = ParameterIn.PATH) @PathVariable("org_code") String orgCode,
        @Parameter(name = "UpdateOrganizationUsersRequest", description = "") @Valid @RequestBody(required = false) UpdateOrganizationUsersRequest updateOrganizationUsersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"users_added\" : [ \"users_added\", \"users_added\" ], \"users_updated\" : [ \"users_updated\", \"users_updated\" ], \"users_removed\" : [ \"users_removed\", \"users_removed\" ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"users_added\" : [ \"users_added\", \"users_added\" ], \"users_updated\" : [ \"users_updated\", \"users_updated\" ], \"users_removed\" : [ \"users_removed\", \"users_removed\" ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/permissions/{permission_id} : Update Permission
     * Update permission
     *
     * @param permissionId The identifier for the permission. (required)
     * @param createPermissionRequest Permission details. (optional)
     * @return Permission successfully updated (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updatePermissions",
        summary = "Update Permission",
        description = "Update permission",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Permission successfully updated", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/permissions/{permission_id}",
        produces = { "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> updatePermissions(
        @Parameter(name = "permission_id", description = "The identifier for the permission.", required = true, in = ParameterIn.PATH) @PathVariable("permission_id") Integer permissionId,
        @Parameter(name = "CreatePermissionRequest", description = "Permission details.") @Valid @RequestBody(required = false) CreatePermissionRequest createPermissionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/roles/{role_id}/permissions : Update Role Permissions
     * Update role permissions. 
     *
     * @param roleId The identifier for the role. (required)
     * @param updateRolePermissionsRequest  (required)
     * @return Permissions successfully updated. (status code 200)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateRolePermissions",
        summary = "Update Role Permissions",
        description = "Update role permissions. ",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Permissions successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateRolePermissionsResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = UpdateRolePermissionsResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/roles/{role_id}/permissions",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UpdateRolePermissionsResponse> updateRolePermissions(
        @Parameter(name = "role_id", description = "The identifier for the role.", required = true, in = ParameterIn.PATH) @PathVariable("role_id") String roleId,
        @Parameter(name = "UpdateRolePermissionsRequest", description = "", required = true) @Valid @RequestBody UpdateRolePermissionsRequest updateRolePermissionsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions_added\" : [ \"permissions_added\", \"permissions_added\" ], \"code\" : \"code\", \"message\" : \"message\", \"permissions_removed\" : [ \"permissions_removed\", \"permissions_removed\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"permissions_added\" : [ \"permissions_added\", \"permissions_added\" ], \"code\" : \"code\", \"message\" : \"message\", \"permissions_removed\" : [ \"permissions_removed\", \"permissions_removed\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/roles/{role_id} : Update Role
     * Update a role
     *
     * @param roleId The identifier for the role. (required)
     * @param updateRolesRequest Role details. (optional)
     * @return Role successfully updated (status code 201)
     *         or Invalid request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateRoles",
        summary = "Update Role",
        description = "Update a role",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Role successfully updated", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = SuccessResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.", content = {
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/roles/{role_id}",
        produces = { "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> updateRoles(
        @Parameter(name = "role_id", description = "The identifier for the role.", required = true, in = ParameterIn.PATH) @PathVariable("role_id") String roleId,
        @Parameter(name = "UpdateRolesRequest", description = "Role details.") @Valid @RequestBody(required = false) UpdateRolesRequest updateRolesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/user : Update User
     * Update a user record. 
     *
     * @param updateUserRequest The user to update. (required)
     * @param id The user&#39;s id. (optional)
     * @return User successfully updated. (status code 200)
     *         or Bad request. (status code 400)
     *         or Invalid credentials. (status code 403)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update User",
        description = "Update a user record. ",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)),
                @Content(mediaType = "application/json; charset=utf-8", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Invalid credentials.")
        },
        security = {
            @SecurityRequirement(name = "kindeBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/user",
        produces = { "application/json", "application/json; charset=utf-8" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> updateUser(
        @Parameter(name = "UpdateUserRequest", description = "The user to update.", required = true) @Valid @RequestBody UpdateUserRequest updateUserRequest,
        @Parameter(name = "id", description = "The user's id.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=utf-8"))) {
                    String exampleString = "{ \"failed_sign_ins\" : 6, \"last_name\" : \"last_name\", \"is_suspended\" : true, \"last_signed_in\" : \"last_signed_in\", \"is_password_reset_requested\" : true, \"total_sign_ins\" : 0, \"picture\" : \"picture\", \"full_name\" : \"full_name\", \"created_on\" : \"created_on\", \"id\" : \"id\", \"provided_id\" : \"provided_id\", \"first_name\" : \"first_name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json; charset=utf-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
